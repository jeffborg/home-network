name: Update evcc Sponsortoken

on:
  schedule:
    - cron: '0 * * * *'  # Runs every hour
  workflow_dispatch:  # Allows manual triggering of the workflow

jobs:
  update-sponsortoken:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.x'

    - name: Install dependencies
      run: |
        pip install requests

    - name: Fetch remote file and extract sponsortoken
      id: fetch_and_extract
      shell: python {0}
      run: |
        import requests
        import re
        import os

        # Define the URL and local file paths
        url = 'https://raw.githubusercontent.com/evcc-io/docs/main/docs/_sponsortoken.mdx'
        local_file_path = 'cluster/apps/home-automation/evcc/evcc-helmrelease.yaml'

        # Fetch the remote file content
        response = requests.get(url)
        content = response.text

        # Extract the sponsortoken value using regex
        match = re.search(r'sponsortoken:\s*(\S+)', content)
        if match:
            sponsortoken = match.group(1)
        else:
            sponsortoken = None

        # Read the current sponsortoken from the local file
        try:
            with open(local_file_path, 'r') as file:
                local_content = file.read()
                local_match = re.search(r'EVCC_SPONSORTOKEN:\s*(\S+)', local_content)
                local_sponsortoken = local_match.group(1) if local_match else None
        except FileNotFoundError:
            local_sponsortoken = None

        # sponsortoken = None
        # Determine if an update is needed
        update_needed = (sponsortoken != local_sponsortoken) and (sponsortoken != None) and (local_sponsortoken != None)

        if update_needed:
            # Prepare updated ConfigMap content
            updated_content = re.sub(r'EVCC_SPONSORTOKEN:\s*\S+', f'EVCC_SPONSORTOKEN: {sponsortoken}', local_content)

            # Write the updated content to the file
            with open(local_file_path, 'w') as file:
                file.write(updated_content)

        # Output results to the GitHub Actions output file
        with open(os.environ['GITHUB_OUTPUT'], 'a') as output_file:
            output_file.write(f'update_needed={update_needed}\n')
            output_file.write(f'new_sponsortoken={sponsortoken}\n')
    - name: Commit changes
      if: steps.fetch_and_extract.outputs.update_needed == 'True'
      run: |
        git config --global user.name 'Jeffrey Borg'
        git config --global user.email 'jeffrey@borgs.net'
        git add cluster/apps/home-automation/evcc/evcc-helmrelease.yaml
        git commit -m "Update sponsortoken for evcc"
        git push
